# macOS Notification MCP Server - Product Requirements Document

## Overview

A lightweight Model Context Protocol (MCP) server that provides a single tool for sending desktop notifications on macOS. This server enables MCP clients (like Claude) to trigger native macOS notifications through a simple, well-defined interface.

## Core Features

### Primary Functionality
- **Single Tool Server**: Implements one tool called `send-notification` for sending macOS desktop notifications
- **Native macOS Integration**: Leverages macOS Notification Center for system-native notifications
- **Rich Notification Support**: Title, message, subtitle, sound, icons, actions, and urgency levels
- **MCP Protocol Compliance**: Full adherence to MCP specification with proper request/response handling

### Technical Requirements
- **TypeScript Implementation**: Full type safety with TypeScript
- **Dual Transport Support**: Both stdio and HTTP transports
- **Zod Validation**: Runtime validation of all inputs
- **Error Handling**: Graceful error handling with meaningful messages
- **Minimal Dependencies**: Lightweight implementation with few external dependencies

## Technical Architecture

### System Components
1. **MCP Server Core**: Handles MCP protocol communication
2. **Transport Layer**: Supports stdio and HTTP transports
3. **Notification Tool**: Single tool implementation with handler
4. **macOS Integration Layer**: Interfaces with macOS notification system
5. **Validation Layer**: Zod schemas for input/output validation

### Tool Specification

#### Tool Name: `send-notification`

#### Input Schema:
```typescript
{
  // Required fields
  title: string;        // Notification title (1-100 chars)
  message: string;      // Notification body text (1-500 chars)
  
  // Optional fields
  subtitle?: string;    // Subtitle text (max 100 chars)
  sound?: boolean;      // Play notification sound (default: true)
  icon?: string;        // Path to icon image
  timeout?: number;     // Auto-dismiss timeout in seconds (1-60, default: 10)
  urgency?: 'low' | 'normal' | 'critical';  // Notification urgency
  actions?: string[];   // Button labels (max 3)
  closeLabel?: string;  // Label for close button
  bundleId?: string;    // App bundle ID to send notification as
  groupId?: string;     // Group notifications together
}
```

#### Output Schema:
```typescript
{
  success: boolean;
  notificationId?: string;  // Unique ID for the notification
  error?: string;          // Error message if failed
  timestamp: number;       // When notification was sent
}
```

## Implementation Approach

### Technology Stack
- **Language**: TypeScript (ES2022)
- **MCP SDK**: @modelcontextprotocol/sdk
- **Notification Library**: node-notifier (recommended)
- **Validation**: Zod
- **Build System**: TypeScript compiler

### Project Structure
```
dingdong-notification-mcp/
├── src/
│   ├── index.ts                 # CLI entry point
│   ├── server.ts                # MCP server setup
│   ├── tools/
│   │   └── notification.ts      # Notification tool implementation
│   ├── schemas/
│   │   └── notification.ts      # Zod schemas
│   └── utils/
│       └── logger.ts            # Simple logging
├── package.json
├── tsconfig.json
├── README.md
└── LICENSE
```

### Integration Options

#### Option 1: node-notifier (Recommended)
- **Pros**: Cross-platform, full feature support, well-maintained
- **Cons**: External dependency
- **Implementation**: Simple API wrapper around native notification systems

#### Option 2: osascript
- **Pros**: No dependencies, direct macOS integration
- **Cons**: Limited features, macOS only, requires shell execution
- **Implementation**: Execute AppleScript commands via child_process

#### Option 3: Native Node.js Addon
- **Pros**: Full API access, best performance
- **Cons**: Complex build process, maintenance overhead
- **Implementation**: C++ addon using macOS notification APIs

## Development Roadmap

### Phase 1: Core Implementation (MVP)
1. Project setup with TypeScript and MCP SDK
2. Basic MCP server with stdio transport
3. Implement send-notification tool with node-notifier
4. Add Zod validation schemas
5. Basic error handling and logging

### Phase 2: Enhanced Features
1. Add HTTP transport support
2. Implement notification grouping
3. Add action button support
4. Implement timeout and urgency levels
5. Add icon support

### Phase 3: Testing & Polish
1. Unit tests for tool handler
2. Integration tests for MCP protocol
3. Manual testing on macOS
4. Documentation and examples
5. Error message improvements

### Phase 4: Production Ready
1. Performance optimization
2. Rate limiting implementation
3. Security hardening
4. Deployment documentation
5. CI/CD setup

## Success Criteria

### Functional Requirements
- Successfully sends notifications on macOS when tool is called
- All required fields (title, message) work correctly
- Optional fields enhance notifications when provided
- Proper error handling for invalid inputs
- MCP protocol compliance with list_tools and call_tool

### Non-Functional Requirements
- Response time < 100ms for notification sending
- Memory usage < 50MB
- Works on macOS 10.14+ (Mojave and later)
- Clear error messages for debugging
- Simple installation and configuration

## Security Considerations

1. **Input Validation**: All inputs validated before processing
2. **Script Injection**: Sanitize strings if using osascript
3. **Rate Limiting**: Prevent notification spam
4. **Permissions**: Handle macOS notification permissions gracefully
5. **No Sensitive Data**: Don't log notification contents

## Testing Strategy

### Unit Tests
- Schema validation tests
- Error handling tests
- Input sanitization tests

### Integration Tests
- MCP protocol compliance
- Transport layer tests
- Tool execution flow

### Manual Tests
- Visual notification appearance
- Sound playback
- Action button functionality
- Different urgency levels
- Timeout behavior

## Documentation Requirements

1. **README**: Installation, configuration, and usage
2. **API Documentation**: Tool schema and examples
3. **Troubleshooting Guide**: Common issues and solutions
4. **Examples**: Sample notification requests
5. **MCP Configuration**: How to add to Claude or other MCP clients

## Future Enhancements

1. **Notification History**: Track sent notifications
2. **Templates**: Pre-defined notification templates
3. **Scheduling**: Send notifications at specific times
4. **Rich Media**: Support for images in notifications
5. **Notification Responses**: Handle user interactions with notifications
6. **Cross-Platform**: Extend to Windows and Linux
7. **Notification Preferences**: User-configurable defaults

## Dependencies

### Required
- @modelcontextprotocol/sdk: ^1.0.0
- zod: ^3.22.4
- node-notifier: ^10.0.0
- typescript: ^5.2.2

### Development
- @types/node: ^20.8.10
- vitest: ^1.0.0
- eslint: ^8.53.0
- prettier: ^3.0.3

## Delivery Expectations

### Deliverables
1. Complete TypeScript implementation
2. Full test suite
3. Documentation (README, API docs)
4. Example configurations
5. Installation instructions

### Quality Standards
- TypeScript strict mode enabled
- 80%+ test coverage
- ESLint and Prettier compliance
- No security vulnerabilities
- Clear, maintainable code